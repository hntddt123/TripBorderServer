# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker Compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
networks:
  backend-network:
    name: tripborder-backend-network
    external: true

secrets:
  db_password:
    file: ./secrets/db_password.txt
  tunnel_token:
    file: ./secrets/tunnel_token.txt

services:
  nominatim:
    image: mediagis/nominatim:5.1  # Pulls pre-built Nominatim with osm2pgsql/PostgreSQL (stable version; avoids manual builds).
    volumes:
      - ${HOME}/nominatim-data/postgresql:/var/lib/postgresql/14/main  # Persists DB data (~500GB+ for planet; maps host path to container for durability).
      - ${HOME}/nominatim-data/flatnode:/nominatim/flatnode  # Flatnode storage for efficient import (reduces RAM needs during osm2pgsql load).
      - ${HOME}/nominatim-data/share:/nominatim/share  # Hosts PBF file (e.g., download planet-latest.osm.pbf here externally via wget).
    environment:
      - PBF_PATH=/nominatim/share/planet-latest.osm.pbf  # Path to OSM data inside container (example: points to downloaded planet file for full import).
      - THREADS=16  # Parallel threads for import (match your CPU cores; speeds up osm2pgsql processing, e.g., 16 cores halve time).
      - REPLICATION_URL=https://planet.openstreetmap.org/replication/day/  # Enables future updates via daily diffs (avoids full re-imports).
      - NOMINATIM_PASSWORD=securepass123  # DB password (example: change to strong value; used for PostgreSQL access).
      - IMPORT_STYLE=admin  # Minimal import style (faster, lower resources; use 'extratags' for more data if needed).
    networks:
      - backend-network  # Joins existing network (allows proxy_pass by service name, e.g., http://nominatim:8080).

  server:
    build: .
    expose:
    - "7776"
    volumes:
      - ./ssl:/ssl
    environment:
      NODE_ENV: development
      DB_HOST: db
      DB_USER: nientaiho
      DB_NAME: tripborderdevdb
      SSL_CERTIFICATE_PATH: /ssl/tripborderbackend-cert.pem
      SSL_PRIVATE_KEY_PATH: /ssl/tripborderbackend-key.pem
    env_file:
      - .env.development
    # migrate to latest database schema and seed file
    command: sh -c "npx knex migrate:latest && npx knex seed:run --knexfile knexfile.js && npm run server" 
    secrets:
      - db_password
    networks:
      - backend-network
    depends_on:
      db:
        condition: service_healthy


  db:
    image: postgres:latest
    environment:
      POSTGRES_USER: nientaiho
      POSTGRES_DB: tripborderdevdb
      POSTGRES_PASSWORD_FILE: /run/secrets/db_password
    secrets:
      - db_password
    volumes:
      - postgres_data_dev:/var/lib/postgresql/data
    networks:
      - backend-network
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "nientaiho", "-d", "tripborderdevdb"]
      interval: 5s
      timeout: 5s
      retries: 5

  nginx:
    image: nginx:alpine
    ports: 
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/dev.conf:/etc/nginx/conf.d/default.conf
      - ./ssl:/etc/nginx/ssl:ro
    networks:
      - backend-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    depends_on:
      - server

volumes:
  postgres_data_dev: # Define the named volume here
